plugins {
    id "java"
    id "application"
        
    id "jacoco"
    id "org.barfuin.gradle.jacocolog" version "2.0.0"

	id "pmd"	
    
    id "checkstyle"
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
    testImplementation "org.hamcrest:hamcrest-library:2.2"
}

jar {
    archiveBaseName = "Highway"

    manifest {
        attributes(
            "Main-Class": "edu.odu.cs.Highway"
        )
    }
}

test {
    useJUnitPlatform()
    reports {
        html.required = true
    }
    ignoreFailures = true

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    finalizedBy jacocoTestReport
}

run {
    mainClass = "edu.odu.cs.Highway"
    args = [0.0, 100.0, 20.0, 30.0, 40.0, 50.0]
}

/* Documentation */ 
javadoc {    
	failOnError = false;     
}

/* Analysis */
jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

pmd {
    toolVersion = "6.21.0"
    ignoreFailures = true
}

pmdTest {
	enabled = false
}

checkstyle {
    toolVersion "8.42"
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
    reports {
        html.destination project.file("build/reports/checkstyle/main.html")
    }
}

checkstyleTest {
    enabled = false
}

/* Website Deployment */
task reportsAndDocumentation(dependsOn: [
    "test",
    "jacocoTestReport",
    "checkstyleMain",
    "javadoc",
    "check",
    "projectReport"])
{
    description "Generate all reports and documentation for this project."
}

task copyReports(type: Copy)
{
    dependsOn "reportsAndDocumentation"

    from "build/reports"
    into "build/tmp/website"

    description "Copy all reports into website directory"
}

task copyDocumentation(type: Copy)
{
    dependsOn "reportsAndDocumentation"

    from "build/docs"
    into "build/tmp/website"

    description "Copy Javadoc output into website directory."
}

task doAllTheCopying(dependsOn: ["copyReports", "copyDocumentation"])
{
    description "Copy all reports and documentation into website directory."
}

/* JBake */
task copyJBakeTemplates(type: Copy)
{
    from "src/jbake"
    into "build/tmp/website"
    
    description "Copy all JBake files into website directory"
}

task doAllTheJBakeCopying(dependsOn: [
    "doAllTheCopying",
    "copyJBakeTemplates"])
{
    description "Copy everything into the JBake working directory."
}

task buildHomePage(dependsOn: copyJBakeTemplates)
{
    inputs.files ("build/tmp/website/content/home0.md", "README.md")
    outputs.file ("build/tmp/website/content/home.md")

    doLast  {
        outputs.files.singleFile.withOutputStream { out ->
            for (file in inputs.files) file.withInputStream {
                out << it << '\n'
            }
        }
    }
    
    description "Create home markdown file"
}

jbake {
    srcDirName = "build/tmp/website"
}

task setUpWebsite()
{
    dependsOn "buildHomePage"
    dependsOn "doAllTheJBakeCopying"
}

bake {
    dependsOn "setUpWebsite"
}